Implement binary search tree and perform following operations: a) Create b)
Insert c) Display tree (Traversal) d) Display - Mirror image e) Create a copy

#include<iostream>
using namespace std;

typedef struct tnode
{
int data;
struct tnode*left;
struct tnode*right;
}tnode;

typedef struct node
{
struct tnode*x;
struct node *next;
}node;

class queue
{
node *front,*rear;
public:
queue()
{
front=NULL;

rear=NULL;
}

int isempty()
{
if(front==NULL)
return 1;
return 0;
}
void enque(tnode *i)
{
node *p;
p=new node();
p->x=i;
p->next=NULL;

if(front==NULL)
{
front=p;
rear=p;
}
else
{
rear->next=p;
rear=rear->next;
}

}
tnode *deque()
{
node *p;
tnode *temp;
p=front;
temp=front->x;
if(front==rear)
{
front=NULL;
rear=NULL;
}
else
{
front=front->next;
}
delete p;
return temp;
}
};

class tree
{
tnode *t;

public:
tree()
{
t=NULL;
}

tnode *insert(int x)
{
tnode *p,*q,*r;

p=new tnode();
p->data=x;
p->left=NULL;
p->right=NULL;

if(t==NULL)
return p;

q=t;
r=t;
while(r!=NULL)
{
q=r;
if(x<r->data)
r=r->left;
else
r=r->right;
}
if(x<q->data)
q->left=p;
else
q->right=p;

return t;
}

//==============================================================

tnode *create()
{
int n,i,key;
cout<<" \n Enter the number of nodes - ";
cin>>n;
for(i=0;i<n;i++)

{
cout<<" \n Enter the data -";
cin>>key;
t=insert(key);
}
return t;
}

void inorder(tnode *t)
{
if(t!=NULL)
{
inorder(t->left);
cout<<"\t"<<t->data;
inorder(t->right);
}
}
//=======================================================
//===============================================================
//===================================================
tnode *mirror(tnode *t)
{
tnode *temp;
if(t==NULL)
{
return NULL;

}
temp=t->left;
t->left=mirror(t->right);
t->right=mirror(temp);
return t;
}

//==============================================================

tnode* copy(tnode *T)
{
tnode *P;
P=NULL;
if(T!=NULL)
{
P=new tnode();
P->data=T->data;
P->left=copy(T->left);
P->right=copy(T->right);
}
return P;
}
//==============================================================

};

int main()
{
int choice,key, cnt;
tnode *root,*result, *rt;
tree t;
do
{
cout<<" \n Main menu "
"\n 1.Create "
"\n 2.Insert "
"\n 3.Display "
"\n 4.Mirror image "
"\n 5.create copy "

"\n 6.Exit \n Enter your choice - ";
cin>>choice;
switch(choice)
{
case 1:root=t.create();
break;
case 2:cout<<"\n Enter the number to insert - ";
cin>>key;
root=t.insert(key);
break;
case 3:cout<<"Binary tree :-";
t.inorder(root);

break;
case 4:root=t.mirror(root);
cout<<"\n Mirror image of the binary tree is :-"<<endl;
t.inorder(root);
break;
break;
case 5: cout<<"\n Copied tree - ";
rt=t.copy(root);
t.inorder(rt);
break;

case 6:return 0;
default:cout<<"\n Invalid choice !! Please enter your choice again."<<endl;
}
}while(choice!=6);
}

